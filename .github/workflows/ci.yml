name: Build OpenWrt
run-name: Build OpenWrt ${{ github.event.inputs.branch }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'your local repo branch'
        required: true
        default: master
        type: choice
        options:
        - master
        - 23.05
      targets:
        description: 'target devices'
        required: true
        default: "['x86-64']"
        type: choice
        options:
        - "['meson-meson8b']"
        - "['x86-64']"
jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: ${{ fromJSON(github.event.inputs.targets) }}

    steps:
    - name: Clone Repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ./scripts/00_init.sh build_env

    - name: Clone OpenWrt
      run: |
        ./scripts/00_init.sh openwrt

    - name: Get variable
      working-directory: ./openwrt
      id: var
      run: |
        case ${{ github.event.inputs.branch }} in
          master)
            _release_tag=snapshot-r$(date +%g.%j)
            _prerelease=true
            ;;
          23.05)
            _release_tag=$(git tag --sort=taggerdate --list 'v23.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          22.03)
            _release_tag=$(git tag --sort=taggerdate --list 'v22.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          *)
            echo "Can't get local/upstream's branch/tags"
            ;;
        esac
        case ${{ matrix.target }} in
          x86-64)           _device=x86-64            ;;
          *)                echo "wrong devices"      ;;
        esac
        _artifact=${{ matrix.target }}
        _artifact_path=openwrt/bin/targets/${_artifact/-//}
        echo "release_tag=$_release_tag" >> $GITHUB_OUTPUT
        echo "prerelease=$_prerelease" >> $GITHUB_OUTPUT
        echo "device=$_device" >> $GITHUB_OUTPUT
        echo "artifact=$_artifact_path" >> $GITHUB_OUTPUT

    - name: Fetch Other repos
      run: |
        ./scripts/00_init.sh other-repos

    - name: Feeds update & install
      run: |
        ./scripts/00_init.sh feeds

    - name: Customize Packages
      working-directory: ./openwrt
      run: |
        cp -L ../scripts/${{ steps.var.outputs.device }}_customization.sh .
        cp ../scripts/01_customize_packages.sh .
        /bin/bash ${{ steps.var.outputs.device }}_customization.sh

    - if: matrix.target == 'x86-64'
      name: FullCone Nat
      working-directory: ./openwrt
      run: |
        cp ../scripts/01_fullconenat.sh .
        /bin/bash 01_fullconenat.sh

    - name: Convert Translation
      working-directory: ./openwrt
      run: |
        cp ../scripts/02_convert_translation.sh .
        /bin/bash 02_convert_translation.sh

    - name: Get cache toolchain
      uses: HiGarfield/cachewrtbuild@main
      with:
        prefix: ${{ github.workspace }}/openwrt
        mixkey: ${{ matrix.target }}

    - name: Make Config
      working-directory: ./openwrt
      run: |
        cp ../config/${{ steps.var.outputs.device }}_defconfig .config
        make defconfig

    - name: Make Download
      working-directory: ./openwrt
      run: |
        make download -j`nproc`

    - name: Compile OpenWrt
      working-directory: ./openwrt
      run: |
        make -j`nproc` || make -j1 V=s

    - name: Assemble Artifact
      run: |
        ls ${{ steps.var.outputs.artifact }}
        cat ${{ steps.var.outputs.artifact }}/config.buildinfo
        rm -rf ${{ steps.var.outputs.artifact }}/{packages,*.buildinfo,*.json,*.manifest,*kernel.bin,*-rootfs.*,sha256sums}

    - if: matrix.target == 'meson-meson8b'
      name: Assemble burn firmware
      run: |
        cp ./scripts/onecloud_burn_customization.sh .
        /bin/bash onecloud_burn_customization.sh

    - name: Upload Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        target_commitish: ${{ github.event.inputs.branch }}
        prerelease: ${{ steps.var.outputs.prerelease }}
        tag_name: ${{ steps.var.outputs.release_tag }}
        files: ${{ steps.var.outputs.artifact }}/*
